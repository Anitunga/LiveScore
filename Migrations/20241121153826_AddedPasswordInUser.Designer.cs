// <auto-generated />
using System;
using LiveScore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LiveScore.Migrations
{
    [DbContext(typeof(LiveScoreContext))]
    [Migration("20241121153826_AddedPasswordInUser")]
    partial class AddedPasswordInUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LiveScore.Models.Coach", b =>
                {
                    b.Property<int>("CoachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoachId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoachId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("LiveScore.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int?>("Foul")
                        .HasColumnType("int");

                    b.Property<int>("PlayerInvolvedPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PointsScored")
                        .HasColumnType("int");

                    b.Property<int>("QuarterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("PlayerInvolvedPlayerId");

                    b.HasIndex("QuarterId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("LiveScore.Models.Foul", b =>
                {
                    b.Property<int>("FoulId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoulId"));

                    b.Property<int>("FoulType")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("QuarterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("FoulId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("QuarterId");

                    b.ToTable("Fouls");
                });

            modelBuilder.Entity("LiveScore.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuarterDuration")
                        .HasColumnType("int");

                    b.Property<int>("TeamAId")
                        .HasColumnType("int");

                    b.Property<int>("TeamBId")
                        .HasColumnType("int");

                    b.Property<int>("TimeoutDuration")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuarters")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("TeamAId");

                    b.HasIndex("TeamBId");

                    b.HasIndex("UserId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("LiveScore.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<bool>("IsStartingPlayer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("LiveScore.Models.Quarter", b =>
                {
                    b.Property<int>("QuarterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuarterId"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TeamAScore")
                        .HasColumnType("int");

                    b.Property<int>("TeamBScore")
                        .HasColumnType("int");

                    b.HasKey("QuarterId");

                    b.HasIndex("MatchId");

                    b.ToTable("Quarters");
                });

            modelBuilder.Entity("LiveScore.Models.Substitution", b =>
                {
                    b.Property<int>("SubstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubstitutionId"));

                    b.Property<int>("PlayerInId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerOutId")
                        .HasColumnType("int");

                    b.Property<int>("QuarterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("SubstitutionId");

                    b.HasIndex("PlayerInId");

                    b.HasIndex("PlayerOutId");

                    b.HasIndex("QuarterId");

                    b.ToTable("Substitutions");
                });

            modelBuilder.Entity("LiveScore.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.HasIndex("CoachId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("LiveScore.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LiveScore.Models.Event", b =>
                {
                    b.HasOne("LiveScore.Models.Player", "PlayerInvolved")
                        .WithMany()
                        .HasForeignKey("PlayerInvolvedPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiveScore.Models.Quarter", "Quarter")
                        .WithMany("Events")
                        .HasForeignKey("QuarterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerInvolved");

                    b.Navigation("Quarter");
                });

            modelBuilder.Entity("LiveScore.Models.Foul", b =>
                {
                    b.HasOne("LiveScore.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LiveScore.Models.Quarter", "Quarter")
                        .WithMany()
                        .HasForeignKey("QuarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Quarter");
                });

            modelBuilder.Entity("LiveScore.Models.Match", b =>
                {
                    b.HasOne("LiveScore.Models.Team", "TeamA")
                        .WithMany()
                        .HasForeignKey("TeamAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LiveScore.Models.Team", "TeamB")
                        .WithMany()
                        .HasForeignKey("TeamBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LiveScore.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveScore.Models.Player", b =>
                {
                    b.HasOne("LiveScore.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("LiveScore.Models.Quarter", b =>
                {
                    b.HasOne("LiveScore.Models.Match", null)
                        .WithMany("Quarters")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("LiveScore.Models.Substitution", b =>
                {
                    b.HasOne("LiveScore.Models.Player", "PlayerIn")
                        .WithMany()
                        .HasForeignKey("PlayerInId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LiveScore.Models.Player", "PlayerOut")
                        .WithMany()
                        .HasForeignKey("PlayerOutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LiveScore.Models.Quarter", "Quarter")
                        .WithMany()
                        .HasForeignKey("QuarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerIn");

                    b.Navigation("PlayerOut");

                    b.Navigation("Quarter");
                });

            modelBuilder.Entity("LiveScore.Models.Team", b =>
                {
                    b.HasOne("LiveScore.Models.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("LiveScore.Models.Match", b =>
                {
                    b.Navigation("Quarters");
                });

            modelBuilder.Entity("LiveScore.Models.Quarter", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("LiveScore.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
