@page "/users"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3>Users</h3>

<div class="table-responsive">
    <table class="table table-bordered table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Username</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (UsersList.Any())
            {
                @foreach (var user in UsersList)
                {
                    <tr>
                        <td>@user.Username</td>
                        <td>@user.Role</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => EditUser(user.UserId)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteUser(user.UserId)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3" class="text-center">No users available</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<button class="btn btn-success" @onclick="CreateNewUser">Create New User</button>

@code {
    private List<User> UsersList = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient{BaseAddress = new Uri("https://localhost:7113/")};
        UsersList = await client.GetFromJsonAsync<List<User>>("api/users");
    }

    private void EditUser(int userId)
    {
        NavigationManager.NavigateTo($"/users/edit/{userId}");
    }

    private void CreateNewUser()
    {
        NavigationManager.NavigateTo("/users/create");
    }

    private async Task DeleteUser(int userId)
    {
        var client = new HttpClient{BaseAddress = new Uri("https://localhost:7113/")};
        await client.DeleteAsync($"api/users/{userId}");
        UsersList = await client.GetFromJsonAsync<List<User>>("api/users"); // Refresh list
    }
}
