@page "/players"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Player List</h3>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Number</th>
            <th>Position</th>
            <th>Team</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Players.Any())
        {
            @foreach (var player in Players)
            {
                <tr>
                    <td>@player.Name</td>
                    <td>@player.Number</td>
                    <td>@player.Position</td>
                    <td>@player.Team?.Name</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditPlayer(player.PlayerId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeletePlayer(player.PlayerId)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">No players available.</td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-success" @onclick="CreatePlayer">Add New Player</button>

@code {
    private List<Player> Players = new List<Player>();

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient { BaseAddress = new Uri("https://localhost:7113/") };
        Players = await client.GetFromJsonAsync<List<Player>>("api/Player");
    }

    private void CreatePlayer()
    {
        NavigationManager.NavigateTo("/players/create");
    }

    private void EditPlayer(int playerId)
    {
        NavigationManager.NavigateTo($"/players/edit/{playerId}"); 
    }

    private async Task DeletePlayer(int playerId)
    {
        var response = await HttpClient.DeleteAsync($"api/players/{playerId}"); //Call the API to delete the player
        if (response.IsSuccessStatusCode)
        {
            Players = await HttpClient.GetFromJsonAsync<List<Player>>("api/players"); // Refresh list
        }
    }
}
