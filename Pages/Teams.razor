@page "/teams"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Teams</h3>

<div class="table-responsive">
    <table class="table table-bordered table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Team Name</th>
                <th>Coach</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (TeamList.Any())
            {
                @foreach (var team in TeamList)
                {
                    <tr>
                        <td>@team.Name</td>
                        <td>@team.Coach?.Name</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => EditTeam(team.TeamId)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteTeam(team.TeamId)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3" class="text-center">No teams available</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<button class="btn btn-success" @onclick="CreateNewTeam">Create New Team</button>

@code {
    private List<Team> TeamList = new List<Team>();

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient { BaseAddress = new Uri("https://localhost:7113/") };
        TeamList = await client.GetFromJsonAsync<List<Team>>("api/teams");
    }

    private void CreateNewTeam()
    {
        NavigationManager.NavigateTo("/teams/create");
    }

    private void EditTeam(int teamId)
    {
        NavigationManager.NavigateTo($"/teams/edit/{teamId}");
    }

    private async Task DeleteTeam(int teamId)
    {
        var response = await HttpClient.DeleteAsync($"api/teams/{teamId}");
        if (response.IsSuccessStatusCode)
        {
            TeamList = await HttpClient.GetFromJsonAsync<List<Team>>("api/teams"); // Refresh list
        }
    }
}
