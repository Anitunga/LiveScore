@page "/teams"
@attribute [Authorize]
@inject ITeamService TeamService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Teams</PageTitle>

<div class="container">
    <h1>Teams</h1>

    <AuthorizeView Roles="Admin">
        <Authorized>
            <button class="btn btn-primary mb-3" @onclick="ShowAddTeamDialog">Add New Team</button>
        </Authorized>
    </AuthorizeView>

    @if (teams == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row">
            @foreach (var team in teams)
            {
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@team.Name</h5>
                            <p class="card-text">Coach: @team.Coach?.Name</p>
                            <p class="card-text">Players: @team.Players?.Count</p>
                            <button class="btn btn-info" @onclick="() => ViewTeamDetails(team.TeamId)">
                                View Details
                            </button>
                            <AuthorizeView Roles="Admin">
                                <Authorized>
                                    <button class="btn btn-warning" @onclick="() => EditTeam(team)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => DeleteTeam(team.TeamId)">Delete</button>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Team> teams;
    private Team newTeam = new();
    private bool showDialog;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeams();
    }

    private async Task LoadTeams()
    {
        teams = (await TeamService.GetAllAsync()).ToList();
    }

    private void ViewTeamDetails(int teamId)
    {
        NavigationManager.NavigateTo($"/team/{teamId}");
    }

    private async Task ShowAddTeamDialog()
    {
        var parameters = new DialogParameters
        {
            { "Team", new Team() },
            { "Title", "Add New Team" }
        };

        var dialog = DialogService.Show<TeamDialog>("Add Team", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await LoadTeams();
        }
    }

    private async Task EditTeam(Team team)
    {
        var parameters = new DialogParameters
        {
            { "Team", team },
            { "Title", "Edit Team" }
        };

        var dialog = DialogService.Show<TeamDialog>("Edit Team", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await LoadTeams();
        }
    }

    private async Task DeleteTeam(int teamId)
    {
        var confirmed = await DialogService.Confirm("Are you sure you want to delete this team?");
        if (confirmed)
        {
            await TeamService.DeleteAsync(teamId);
            await LoadTeams();
        }
    }
} 