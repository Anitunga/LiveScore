@page "/matches/create"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3>Create Match</h3>

<EditForm Model="NewMatch" OnValidSubmit="HandleCreateMatch">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="teamA">Team A:</label>
        <InputSelect class="form-control" id="teamA" @bind-Value="NewMatch.TeamAId">
            <option value="">Select a team</option>
            @foreach (var team in Teams)
            {
                <option value="@team.TeamId">@team.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="teamB">Team B:</label>
        <InputSelect class="form-control" id="teamB" @bind-Value="NewMatch.TeamBId">
            <option value="">Select a team</option>
            @foreach (var team in Teams)
            {
                <option value="@team.TeamId">@team.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="totalQuarters">Total Quarters:</label>
        <InputNumber class="form-control" id="totalQuarters" @bind-Value="NewMatch.TotalQuarters" />
    </div>

    <div class="form-group">
        <label for="quarterDuration">Quarter Duration:</label>
        <InputNumber class="form-control" id="quarterDuration" @bind-Value="NewMatch.QuarterDuration" />
    </div>

    <div class="form-group">
        <label for="timeoutDuration">Timeout Duration:</label>
        <InputNumber class="form-control" id="timeoutDuration" @bind-Value="NewMatch.TimeoutDuration" />
    </div>

    <button type="submit" class="btn btn-primary">Create Match</button>
</EditForm>

@code {
    private Match NewMatch = new Match();
    private List<Team> Teams = new List<Team>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = new HttpClient { BaseAddress = new Uri("https://localhost:7113/") };
            Teams = await client.GetFromJsonAsync<List<Team>>("api/teams");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching teams: {ex.Message}");
        }
    }

    private async Task HandleCreateMatch()
    {
        var client = new HttpClient { BaseAddress = new Uri("https://localhost:7113/") };
        var response = await client.PostAsJsonAsync("api/matches", NewMatch);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/matches");
        }
        else
        {
            Console.WriteLine("Error creating match");
        }
    }
}
